# -*- coding: utf-8 -*-
"""Sleep_Pattern_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uqAuCxRTVK_ZdKXtiOosEqe3CQUrfjn_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler, StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.models import Sequential
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import mean_absolute_error, mean_squared_error

sleep = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Sleep_health_and_lifestyle_dataset.csv")

sleep.head(5)

sns.countplot(x = 'Sleep Disorder', data = sleep)

plt.figure(figsize = (17, 5))
sns.countplot(x = 'Occupation', data = sleep)

sleep['Occupation'].value_counts()

sns.countplot(x = 'Gender', data = sleep)

plt.figure(figsize = (17, 5))
sns.lineplot(x = 'Age', y = 'Sleep Duration', data = sleep)

plt.figure(figsize = (17, 5))
sns.lineplot(x = 'Occupation', y = 'Sleep Duration', data = sleep)

sns.countplot(x = 'Quality of Sleep', data = sleep)

sns.countplot(x = 'BMI Category', data = sleep)

sns.pairplot(sleep)

plt.figure(figsize = (17, 5))
sns.lineplot(x = 'Occupation', y = 'BMI Category', data = sleep)

sleep['Sleep Disorder']

sleep['Sleep Disorder'] = sleep['Sleep Disorder'].fillna('Sleep Apnea')

sleep['Sleep Disorder']

sns.countplot(x = 'Sleep Disorder', data = sleep)

sleep['Sleep Disorder'] = sleep['Sleep Disorder'].replace({'Sleep Apnea': 1, 'Insomnia': 2})

print(sleep['Sleep Disorder'] == 'Insomnia')

sns.countplot(x = 'Sleep Disorder', data = sleep)

columns_to_scale = ['Age', 'Sleep Duration', 'Quality of Sleep', 'Physical Activity Level', 'Stress Level']
columns_to_encode = ['Gender', 'Occupation']

preprocessor = ColumnTransformer(
    transformers=[
        ('scale', StandardScaler(), columns_to_scale),
        ('encode', OneHotEncoder(sparse_output=False, handle_unknown='ignore'), columns_to_encode)
    ],
    remainder='passthrough'
)

sleep['Gender'] = sleep['Gender'].replace({'Female': 0, 'Male': 1})

sleep['Gender'].value_counts()

sleep['Occupation']

sleep['Occupation'] = sleep['Occupation'].replace({'Software Engineer': 0, 'Doctor': 1, 'Sales Representative': 2, 'Nurse': 3, 'Accountant': 4, 'Lawyer': 5, 'Teacher': 6, 'Scientist': 7, 'Manager': 8, 'Engineer': 9, 'Salesperson': 10})

sleep.head()

sleep['BMI Category'] = sleep['BMI Category'].replace({'Normal': 0, 'Overweight': 1, 'Obese': 2, 'Normal Weight': 3})

sleep.head()

sleep[['systolic', 'diastolic']] = sleep['Blood Pressure'].str.split('/', expand=True).astype(int)
sleep = sleep.drop('Blood Pressure', axis=1)

sleep.head()

sleep.info()

X = sleep.drop('Sleep Disorder', axis = 1)
y = sleep['Sleep Disorder']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)

scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

modeler = Sequential([
    Dense(64, activation='relu', input_shape=(13,), kernel_initializer='he_normal'),  # Use He initialization
    Dense(32, activation='relu', kernel_initializer='he_normal'),
    Dense(16, activation='relu', kernel_initializer='he_normal'),
    Dense(1, activation='sigmoid')
])

import keras
from tensorflow.keras.optimizers import Adam
modeler.compile(optimizer=keras.optimizers.Adam(learning_rate=1e-3),
                                    loss='binary_crossentropy',
                                    metrics=['accuracy'])

modeler.fit(X_train, y_train, epochs=100, validation_data=(X_test, y_test))

hist = modeler.history.history

hist = pd.DataFrame(hist)
hist.plot()

modeler.save('sleep_model.h5')